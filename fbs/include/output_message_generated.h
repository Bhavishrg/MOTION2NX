// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OUTPUTMESSAGE_ABYN_COMMUNICATION_H_
#define FLATBUFFERS_GENERATED_OUTPUTMESSAGE_ABYN_COMMUNICATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ABYN {
namespace Communication {

struct OutputWirePayload;

struct OutputMessage;

struct OutputWirePayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD = 4
  };
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           verifier.EndTable();
  }
};

struct OutputWirePayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(OutputWirePayload::VT_PAYLOAD, payload);
  }
  explicit OutputWirePayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OutputWirePayloadBuilder &operator=(const OutputWirePayloadBuilder &);
  flatbuffers::Offset<OutputWirePayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OutputWirePayload>(end);
    return o;
  }
};

inline flatbuffers::Offset<OutputWirePayload> CreateOutputWirePayload(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0) {
  OutputWirePayloadBuilder builder_(_fbb);
  builder_.add_payload(payload);
  return builder_.Finish();
}

inline flatbuffers::Offset<OutputWirePayload> CreateOutputWirePayloadDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *payload = nullptr) {
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return ABYN::Communication::CreateOutputWirePayload(
      _fbb,
      payload__);
}

struct OutputMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GATE_ID = 4,
    VT_WIRES = 6
  };
  uint64_t gate_id() const {
    return GetField<uint64_t>(VT_GATE_ID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<OutputWirePayload>> *wires() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OutputWirePayload>> *>(VT_WIRES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_GATE_ID) &&
           VerifyOffset(verifier, VT_WIRES) &&
           verifier.VerifyVector(wires()) &&
           verifier.VerifyVectorOfTables(wires()) &&
           verifier.EndTable();
  }
};

struct OutputMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gate_id(uint64_t gate_id) {
    fbb_.AddElement<uint64_t>(OutputMessage::VT_GATE_ID, gate_id, 0);
  }
  void add_wires(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OutputWirePayload>>> wires) {
    fbb_.AddOffset(OutputMessage::VT_WIRES, wires);
  }
  explicit OutputMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OutputMessageBuilder &operator=(const OutputMessageBuilder &);
  flatbuffers::Offset<OutputMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OutputMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<OutputMessage> CreateOutputMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t gate_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OutputWirePayload>>> wires = 0) {
  OutputMessageBuilder builder_(_fbb);
  builder_.add_gate_id(gate_id);
  builder_.add_wires(wires);
  return builder_.Finish();
}

inline flatbuffers::Offset<OutputMessage> CreateOutputMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t gate_id = 0,
    const std::vector<flatbuffers::Offset<OutputWirePayload>> *wires = nullptr) {
  auto wires__ = wires ? _fbb.CreateVector<flatbuffers::Offset<OutputWirePayload>>(*wires) : 0;
  return ABYN::Communication::CreateOutputMessage(
      _fbb,
      gate_id,
      wires__);
}

inline const ABYN::Communication::OutputMessage *GetOutputMessage(const void *buf) {
  return flatbuffers::GetRoot<ABYN::Communication::OutputMessage>(buf);
}

inline const ABYN::Communication::OutputMessage *GetSizePrefixedOutputMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ABYN::Communication::OutputMessage>(buf);
}

inline bool VerifyOutputMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ABYN::Communication::OutputMessage>(nullptr);
}

inline bool VerifySizePrefixedOutputMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ABYN::Communication::OutputMessage>(nullptr);
}

inline void FinishOutputMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ABYN::Communication::OutputMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOutputMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ABYN::Communication::OutputMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Communication
}  // namespace ABYN

#endif  // FLATBUFFERS_GENERATED_OUTPUTMESSAGE_ABYN_COMMUNICATION_H_
